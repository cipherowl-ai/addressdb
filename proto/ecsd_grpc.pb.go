// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/ecsd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ECSd_CheckAddress_FullMethodName        = "/proto.ECSd/CheckAddress"
	ECSd_BatchCheckAddresses_FullMethodName = "/proto.ECSd/BatchCheckAddresses"
	ECSd_InspectFilter_FullMethodName       = "/proto.ECSd/InspectFilter"
)

// ECSdClient is the client API for ECSd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ECSd provides methods to check addresses against a Bloom filter
type ECSdClient interface {
	// CheckAddress checks if an address is in the Bloom filter
	CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error)
	// BatchCheckAddresses checks if multiple addresses are in the Bloom filter
	BatchCheckAddresses(ctx context.Context, in *BatchCheckRequest, opts ...grpc.CallOption) (*BatchCheckResponse, error)
	// InspectFilter returns statistics about the Bloom filter
	InspectFilter(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectResponse, error)
}

type eCSdClient struct {
	cc grpc.ClientConnInterface
}

func NewECSdClient(cc grpc.ClientConnInterface) ECSdClient {
	return &eCSdClient{cc}
}

func (c *eCSdClient) CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAddressResponse)
	err := c.cc.Invoke(ctx, ECSd_CheckAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSdClient) BatchCheckAddresses(ctx context.Context, in *BatchCheckRequest, opts ...grpc.CallOption) (*BatchCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCheckResponse)
	err := c.cc.Invoke(ctx, ECSd_BatchCheckAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSdClient) InspectFilter(ctx context.Context, in *InspectRequest, opts ...grpc.CallOption) (*InspectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InspectResponse)
	err := c.cc.Invoke(ctx, ECSd_InspectFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ECSdServer is the server API for ECSd service.
// All implementations must embed UnimplementedECSdServer
// for forward compatibility.
//
// ECSd provides methods to check addresses against a Bloom filter
type ECSdServer interface {
	// CheckAddress checks if an address is in the Bloom filter
	CheckAddress(context.Context, *CheckAddressRequest) (*CheckAddressResponse, error)
	// BatchCheckAddresses checks if multiple addresses are in the Bloom filter
	BatchCheckAddresses(context.Context, *BatchCheckRequest) (*BatchCheckResponse, error)
	// InspectFilter returns statistics about the Bloom filter
	InspectFilter(context.Context, *InspectRequest) (*InspectResponse, error)
	mustEmbedUnimplementedECSdServer()
}

// UnimplementedECSdServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedECSdServer struct{}

func (UnimplementedECSdServer) CheckAddress(context.Context, *CheckAddressRequest) (*CheckAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddress not implemented")
}
func (UnimplementedECSdServer) BatchCheckAddresses(context.Context, *BatchCheckRequest) (*BatchCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckAddresses not implemented")
}
func (UnimplementedECSdServer) InspectFilter(context.Context, *InspectRequest) (*InspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectFilter not implemented")
}
func (UnimplementedECSdServer) mustEmbedUnimplementedECSdServer() {}
func (UnimplementedECSdServer) testEmbeddedByValue()              {}

// UnsafeECSdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ECSdServer will
// result in compilation errors.
type UnsafeECSdServer interface {
	mustEmbedUnimplementedECSdServer()
}

func RegisterECSdServer(s grpc.ServiceRegistrar, srv ECSdServer) {
	// If the following call pancis, it indicates UnimplementedECSdServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ECSd_ServiceDesc, srv)
}

func _ECSd_CheckAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSdServer).CheckAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECSd_CheckAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSdServer).CheckAddress(ctx, req.(*CheckAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSd_BatchCheckAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSdServer).BatchCheckAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECSd_BatchCheckAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSdServer).BatchCheckAddresses(ctx, req.(*BatchCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECSd_InspectFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECSdServer).InspectFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ECSd_InspectFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECSdServer).InspectFilter(ctx, req.(*InspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ECSd_ServiceDesc is the grpc.ServiceDesc for ECSd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ECSd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ECSd",
	HandlerType: (*ECSdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAddress",
			Handler:    _ECSd_CheckAddress_Handler,
		},
		{
			MethodName: "BatchCheckAddresses",
			Handler:    _ECSd_BatchCheckAddresses_Handler,
		},
		{
			MethodName: "InspectFilter",
			Handler:    _ECSd_InspectFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ecsd.proto",
}
